package com.github.olaaronsson.process.demo.trip;

import static com.github.olaaronsson.process.demo.trip.TripStatus.Status.CAR_NOT_CONFIRMED;
import static com.github.olaaronsson.process.demo.trip.TripStatus.Status.FLIGHT_NOT_CONFIRMED;
import static com.github.olaaronsson.process.demo.trip.TripStatus.Status.HOTEL_NOT_CONFIRMED;
import static com.github.olaaronsson.process.demo.trip.TripStatus.Status.NEW_ORDER;

import com.github.olaaronsson.process.demo.test.support.io.IO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.github.olaaronsson.process.MakeStep;
import com.github.olaaronsson.process.ProcessStep;
import com.github.olaaronsson.process.demo.trip.internal.BookingCentral;
import com.github.olaaronsson.process.exception.ProcessRuntimeException;
import com.github.olaaronsson.process.impl.ProcessBase;
import com.github.olaaronsson.process.interfaces.PersistenceService;
import com.github.olaaronsson.process.interfaces.ProcessSubject;

public class TripProcess extends ProcessBase {


	private static final Logger LOGGER = LoggerFactory.getLogger(TripProcess.class);

	public static final TripStatus.Status[] CRITERIA_STATES = { NEW_ORDER, FLIGHT_NOT_CONFIRMED, HOTEL_NOT_CONFIRMED, CAR_NOT_CONFIRMED };

	protected TripProcess(ProcessSubject processSubject, PersistenceService persistenceService) {
		super(processSubject, persistenceService);
	}

	@Override
	public String name() {
		return "Booking a trip";
	}

	@Override
	public Enum<?>[] criteriaStates() {
		return CRITERIA_STATES;
	}
	@Override
	public Enum<?> finishedState() {
		return TripStatus.Status.CAR_CONFIRMED;
	}

	@Override
	public void process() {
		TripStatus.Status currentStatus = (TripStatus.Status) getSubject().getCurrentStatus();
		switch (currentStatus) {
			case NEW_ORDER:
			case FLIGHT_NOT_CONFIRMED:
				executeStep(bookFlightStep);
				break;
			case FLIGHT_CONFIRMED:
			case HOTEL_NOT_CONFIRMED:
				executeStep(bookHotelStep);
				break;
			case HOTEL_CONFIRMED:
			case CAR_NOT_CONFIRMED:
				executeStep(bookCarStep);
				break;
			default:
				Throwable t = new ProcessRuntimeException(String.format("Got bad input : order %s which is in state %s [%s]", getSubject().id(), getSubject().getCurrentStatus().name(), currentStatusDescription()));
				LOGGER.error("err", t);
				throw (RuntimeException) t;
		}
	}

	@MakeStep(description = "book flight", statusUponSuccess = "Status.FLIGHT_CONFIRMED", statusUponFailure = "Status.FLIGHT_NOT_CONFIRMED", enumStateProvider = TripStatus.class, sourceEncoding = IO.DEF_ENCODING)
	private void bookFlight() {
		((TripSubject) getSubject()).setFlightConfirmation(BookingCentral.getFlightConfirmation());
	}

	@MakeStep(description = "behåll skit", statusUponSuccess = "Status.HOTEL_CONFIRMED", statusUponFailure = "Status.HOTEL_NOT_CONFIRMED", enumStateProvider = TripStatus.class, sourceEncoding = IO.DEF_ENCODING)
	private void bookHotel() {
		((TripSubject) getSubject()).setHotelConfirmation(BookingCentral.getHotelConfirmation());
	}

	@MakeStep(description = "book car", statusUponSuccess = "Status.CAR_CONFIRMED", statusUponFailure = "Status.CAR_NOT_CONFIRMED", enumStateProvider = TripStatus.class, sourceEncoding = IO.DEF_ENCODING)
	private void bookCar() {
		((TripSubject) getSubject()).setCarConfirmation(BookingCentral.getCarConfirmation());
	}
	
    ///////CHKSUM: 99A5F63310B9C368B2A106C0CC0B4DC0XXXXXXXX/////////////////////
    //
    // The following code is generated by the DaProcessStepProcessor 
    // written by Ola Aronsson in 2020, courtesy of nollettnoll AB
    //
    // DO NOT edit this section. Modify @MakeStep or CHKSUM (then keep length)  to re-generate.
    //

    private final ProcessStep bookFlightStep = new ProcessStep(){ 

        @Override
        public void execute() {
            bookFlight();
        }

        @Override
        public String processName() {
            return "TRIPPROCESS";
        }

        @Override
        public String description() {
            return "book flight";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.FLIGHT_CONFIRMED;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.FLIGHT_NOT_CONFIRMED;
        }

    };

    private final ProcessStep bookCarStep = new ProcessStep(){ 

        @Override
        public void execute() {
            bookCar();
        }

        @Override
        public String processName() {
            return "TRIPPROCESS";
        }

        @Override
        public String description() {
            return "book car";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.CAR_CONFIRMED;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.CAR_NOT_CONFIRMED;
        }

    };

    private final ProcessStep bookHotelStep = new ProcessStep(){ 

        @Override
        public void execute() {
            bookHotel();
        }

        @Override
        public String processName() {
            return "TRIPPROCESS";
        }

        @Override
        public String description() {
            return "behåll skit";
        }

        @Override
        public Enum<?> statusUponSuccess() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.HOTEL_CONFIRMED;
        }

        @Override
        public Enum<?> statusUponFailure() {
            return com.github.olaaronsson.process.demo.trip.TripStatus.Status.HOTEL_NOT_CONFIRMED;
        }

    };

    ///////////////////////////////////////////////////////////////////////////////
    //
    // End DaProcessStepProcessor generation
    //

}